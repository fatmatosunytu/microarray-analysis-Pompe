# ======================= ENRICHMENT: GO / KEGG / GSEA + MELAS =======================
# Ön-koşullar: root, tt_all, tt_gene, deg, groups, expr_cb/expr_matrix
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
for (p in c("clusterProfiler","org.Hs.eg.db","enrichplot","DOSE","GOSemSim")) {
  if (!requireNamespace(p, quietly = TRUE)) BiocManager::install(p, ask = FALSE, update = FALSE)
}
for (p in c("ggplot2","ggrepel","jsonlite")) if (!requireNamespace(p, quietly = TRUE)) install.packages(p)

library(clusterProfiler); library(org.Hs.eg.db); library(enrichplot)
library(DOSE); library(GOSemSim); library(ggplot2); library(ggrepel); library(jsonlite)

## 0) Klasörler
enrich_dir <- file.path(root, "results", "enrichment"); dir.create(enrich_dir, recursive = TRUE, showWarnings = FALSE)
plot_dir   <- file.path(root, "results", "plots");       dir.create(plot_dir,   recursive = TRUE, showWarnings = FALSE)

## 1) Girdi listeleri (main analiz)
stopifnot(exists("tt_gene"), exists("deg"))
sig_symbols      <- unique(na.omit(as.character(deg$SYMBOL)))
universe_symbols <- unique(na.omit(as.character(tt_gene$SYMBOL)))

# FAIR: evren/sig listelerini kaydet
writeLines(sig_symbols,      file.path(enrich_dir, "_sig_gene_symbols.txt"))
writeLines(universe_symbols, file.path(enrich_dir, "_universe_gene_symbols.txt"))

## 2) ID dönüşümü (Entrez)
sym2entrez      <- bitr(universe_symbols, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)
entrez_universe <- unique(na.omit(sym2entrez$ENTREZID))
sig2entrez      <- bitr(sig_symbols, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)
entrez_sig      <- unique(na.omit(sig2entrez$ENTREZID))

## 3) Provenans/param yaz
meta <- list(time=as.character(Sys.time()),
             n_sig_genes=length(sig_symbols), n_universe_genes=length(universe_symbols),
             n_sig_entrez=length(entrez_sig), n_universe_entrez=length(entrez_universe),
             adjust_method="BH", pvalueCutoff=0.05, qvalueCutoff=0.05)
writeLines(jsonlite::toJSON(meta, pretty=TRUE), file.path(enrich_dir, "_params_enrichment_main.json"))

## 4) GO: BP (SYMBOL + explicit universe)
go_bp <- enrichGO(gene = sig_symbols, OrgDb = org.Hs.eg.db, keyType = "SYMBOL",
                  ont = "BP", universe = universe_symbols,
                  pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.05,
                  readable = TRUE)
write.csv(as.data.frame(go_bp), file.path(enrich_dir,"GO_BP_main.csv"), row.names = FALSE)

## 5) KEGG (ENTREZ) – bazı sürümlerde universe parametresi yok → koşullu ekle
ek_args <- list(gene = entrez_sig, organism = "hsa", pAdjustMethod = "BH", pvalueCutoff = 0.05)
if ("universe" %in% names(formals(clusterProfiler::enrichKEGG))) ek_args$universe <- entrez_universe
kegg <- do.call(clusterProfiler::enrichKEGG, ek_args)
write.csv(as.data.frame(kegg), file.path(enrich_dir,"KEGG_main.csv"), row.names = FALSE)

## 6) GSEA (eşik bağımlılığını azaltır) — geneList = t-istatistiği (daha güçlü)
# tt_all içinde t sütunu olmalı; yoksa logFC kullan
gl_df <- tt_gene[, c("SYMBOL","t","logFC")]
gl_df$t[is.na(gl_df$t)] <- gl_df$logFC[is.na(gl_df$t)]
gl_df <- merge(gl_df, sym2entrez, by.x="SYMBOL", by.y="SYMBOL", all.x=TRUE)
gl_df <- gl_df[!is.na(gl_df$ENTREZID), c("ENTREZID","t")]
geneList <- gl_df$t; names(geneList) <- gl_df$ENTREZID; geneList <- sort(geneList, decreasing = TRUE)

gsea_go   <- NULL
gsea_kegg <- NULL
if (length(geneList) >= 20) {
  gsea_go   <- try(gseGO(geneList = geneList, OrgDb = org.Hs.eg.db, keyType = "ENTREZID",
                         ont = "BP", pAdjustMethod = "BH", verbose = FALSE), silent = TRUE)
  gsea_kegg <- try(gseKEGG(geneList = geneList, organism = "hsa", pAdjustMethod = "BH", verbose = FALSE), silent = TRUE)
  if (!inherits(gsea_go, "try-error"))   write.csv(as.data.frame(gsea_go),   file.path(enrich_dir,"GSEA_GO_BP_main.csv"),   row.names = FALSE)
  if (!inherits(gsea_kegg, "try-error")) write.csv(as.data.frame(gsea_kegg), file.path(enrich_dir,"GSEA_KEGG_main.csv"),    row.names = FALSE)
}

## 7) Görseller (statik, makale‑hazır)
if (!is.null(go_bp) && nrow(as.data.frame(go_bp)) > 0) {
  p_go_dot <- dotplot(go_bp, showCategory = 15, title = "GO BP (BH, explicit universe)")
  ggsave(file.path(plot_dir,"GO_BP_dotplot_main.png"), p_go_dot, width=10, height=9, dpi=300)
  p_go_bar <- barplot(go_bp, showCategory = 15, title = "GO BP (BH, explicit universe)")
  ggsave(file.path(plot_dir,"GO_BP_barplot_main.png"), p_go_bar, width=10, height=9, dpi=300)

  hsGO <- try(godata('org.Hs.eg.db', ont="BP"), silent=TRUE)
  if (!inherits(hsGO,"try-error")) {
    s <- try(pairwise_termsim(go_bp, semData=hsGO), silent=TRUE)
    if (!inherits(s,"try-error")) {
      p_emap <- try(emapplot(s, showCategory=15), silent=TRUE)
      if (!inherits(p_emap,"try-error")) ggsave(file.path(plot_dir,"GO_BP_emapplot_main.png"), p_emap, width=10, height=10, dpi=300)
    }
  }
}
if (!is.null(kegg) && nrow(as.data.frame(kegg)) > 0) {
  p_kegg <- barplot(kegg, showCategory = 15, title = "KEGG (BH)")
  ggsave(file.path(plot_dir,"KEGG_barplot_main.png"), p_kegg, width=10, height=9, dpi=300)
}
if (!is.null(gsea_go) && !inherits(gsea_go,"try-error") && nrow(as.data.frame(gsea_go))>0) {
  p_gsea1 <- gseaplot2(gsea_go, geneSetID = head(gsea_go@result$ID,1), title = "GSEA GO BP (top set)")
  ggsave(file.path(plot_dir,"GSEA_GO_BP_topset_main.png"), p_gsea1, width=10, height=6, dpi=300)
}
if (!is.null(gsea_kegg) && !inherits(gsea_kegg,"try-error") && nrow(as.data.frame(gsea_kegg))>0) {
  p_gsea2 <- gseaplot2(gsea_kegg, geneSetID = head(gsea_kegg@result$ID,1), title = "GSEA KEGG (top pathway)")
  ggsave(file.path(plot_dir,"GSEA_KEGG_topset_main.png"), p_gsea2, width=10, height=6, dpi=300)
}

## 8) MELAS duyarlılık zenginleştirme (varsa)
enrich_melas <- function(deg_tbl, tag) {
  sig_syms <- unique(na.omit(as.character(deg_tbl$SYMBOL)))
  if (length(sig_syms) < 3) return(invisible(NULL))
  sig_ent  <- unique(na.omit(bitr(sig_syms, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)$ENTREZID))

  go <- enrichGO(gene=sig_syms, OrgDb=org.Hs.eg.db, keyType="SYMBOL",
                 ont="BP", universe=universe_symbols,
                 pAdjustMethod="BH", pvalueCutoff=0.05, qvalueCutoff=0.05, readable=TRUE)
  write.csv(as.data.frame(go), file.path(enrich_dir, paste0("GO_BP_",tag,".csv")), row.names=FALSE)

  ek_args <- list(gene=sig_ent, organism="hsa", pAdjustMethod="BH", pvalueCutoff=0.05)
  if ("universe" %in% names(formals(clusterProfiler::enrichKEGG))) ek_args$universe <- entrez_universe
  kk <- do.call(clusterProfiler::enrichKEGG, ek_args)
  write.csv(as.data.frame(kk), file.path(enrich_dir, paste0("KEGG_",tag,".csv")), row.names=FALSE)

  if (!is.null(go) && nrow(as.data.frame(go))>0) {
    ggsave(file.path(plot_dir, paste0("GO_BP_dotplot_",tag,".png")),
           dotplot(go, showCategory=15, title=paste0("GO BP (",tag,")")), width=10, height=9, dpi=300)
  }
  if (!is.null(kk) && nrow(as.data.frame(kk))>0) {
    ggsave(file.path(plot_dir, paste0("KEGG_barplot_",tag,".png")),
           barplot(kk, showCategory=15, title=paste0("KEGG (",tag,")")), width=10, height=9, dpi=300)
  }
  invisible(list(go=go, kegg=kk))
}

if (exists("deg_sens")) {
  invisible(enrich_melas(deg_sens, "noMELAS"))
} else if (exists("pheno_aligned") && "is_melas" %in% names(pheno_aligned) && any(pheno_aligned$is_melas)) {
  # MELAS'lar hariç yeni DEG üret (ana ayarlarla tutarlı)
  keep_idx <- which(!pheno_aligned$is_melas)
  expr_s   <- expr_cb[, keep_idx, drop=FALSE]
  ph_s     <- droplevels(pheno_aligned[keep_idx, ])
  design_s <- model.matrix(~ 0 + group, data = ph_s); colnames(design_s) <- levels(ph_s$group)
  fit_s2   <- limma::eBayes(limma::contrasts.fit(limma::lmFit(expr_s, design_s),
                                                 limma::makeContrasts(Pompe - Control, levels = design_s)))
  tt_all_s <- limma::topTable(fit_s2, coef=1, number=Inf, adjust.method="BH")
  # gene-level tekilleştirme
  tt_all_s$abs_logFC <- abs(tt_all_s$logFC)
  tt_gene_s <- tt_all_s[!is.na(tt_all_s$SYMBOL) & nzchar(tt_all_s$SYMBOL), ]
  tt_gene_s <- tt_gene_s[order(tt_gene_s$SYMBOL, -tt_gene_s$abs_logFC), ]
  tt_gene_s <- tt_gene_s[!duplicated(tt_gene_s$SYMBOL), ]
  deg_sens  <- subset(tt_gene_s, adj.P.Val < 0.05)
  write.csv(deg_sens, file.path(enrich_dir,"DEG_noMELAS_FDR_lt_0.05.csv"), row.names=FALSE)
  invisible(enrich_melas(deg_sens, "noMELAS"))
}

## 9) Kısa özet
sum_lines <- c(
  sprintf("Main GO terms (q<0.05): %d", ifelse(is.null(go_bp), 0, nrow(as.data.frame(go_bp)))),
  sprintf("Main KEGG pathways (q<0.05): %d", ifelse(is.null(kegg), 0, nrow(as.data.frame(kegg)))),
  sprintf("Universe size: SYMBOL=%d | ENTREZ=%d", length(universe_symbols), length(entrez_universe)),
  "Notes: BH correction everywhere; GO uses explicit universe (all tested gene-level).",
  "Sensitivity: If MELAS present, enrichment repeated without MELAS; GSEA added to reduce threshold dependence."
)
writeLines(sum_lines, file.path(enrich_dir,"_ENRICHMENT_SUMMARY.txt"))
# =============================================================================== 



# ==================== miRNA Target Enrichment (FAIR, offline) ====================
# Koşullar: tt_gene (gene-level tablo) ve deg (FDR<0.05) mevcut olmalı
# Kullanılan nesneler: tt_gene, deg, pheno_aligned (MELAS için), groups
# Çıktılar: results/miRNA_analysis/ altına CSV/PNG/JSON/TXT

# ---- Paketler
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
need_bioc <- c("multiMiR")
for (p in need_bioc) if (!requireNamespace(p, quietly = TRUE)) BiocManager::install(p, ask = FALSE)
need_cran <- c("dplyr","ggplot2","ggrepel","jsonlite")
for (p in need_cran) if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
lapply(c("multiMiR","dplyr","ggplot2","ggrepel","jsonlite"), library, character.only = TRUE)

# ---- Klasörler + meta
root_dir <- if (exists("root")) root else getwd()
out_dir  <- file.path(root_dir, "results", "miRNA_analysis")
dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)
set.seed(20240724)

# ---- Girdiler (FAIR kontroller)
stopifnot(exists("tt_gene"), "SYMBOL" %in% names(tt_gene))
stopifnot(exists("deg"),     "SYMBOL" %in% names(deg))
universe_symbols <- unique(tt_gene$SYMBOL[!is.na(tt_gene$SYMBOL) & nzchar(tt_gene$SYMBOL)])
sig_genes        <- unique(deg$SYMBOL[!is.na(deg$SYMBOL) & nzchar(deg$SYMBOL)])

meta <- list(
  dataset              = "GSE38680",
  n_control            = if (exists("groups")) sum(groups=="Control") else NA_integer_,
  n_pompe              = if (exists("groups")) sum(groups=="Pompe") else NA_integer_,
  n_universe_genes     = length(universe_symbols),
  n_sig_genes_FDR_lt05 = length(sig_genes),
  adjust_method        = "BH",
  note_small_n         = "Small sample size; interpret enrichment cautiously."
)
jsonlite::write_json(meta, file.path(out_dir, "_mirna_meta.json"), pretty = TRUE)

# ---- Yardımcı: miRNA hedef zenginleştirme (Fisher + BH)
enrich_mirna <- function(gene_set, universe_set, which_table=c("validated","predicted")) {
  which_table <- match.arg(which_table)
  # multiMiR'den hedef map (yerel kaynaklar)
  mm <- tryCatch(
    multiMiR::get_multimir(org="hsa", target = universe_set, table = which_table, summary = FALSE),
    error = function(e) NULL
  )
  if (is.null(mm) || nrow(mm@data)==0) return(NULL)

  df <- mm@data
  # multiMiR sütunları değişebilir: hedef sembol için esnek alan seçelim
  target_col <- c("target_symbol","target.gene","target")[
    c("target_symbol","target.gene","target") %in% names(df)][1]
  if (is.na(target_col)) return(NULL)

  df <- df[!is.na(df[[target_col]]) & nzchar(df[[target_col]]), c("mature_mirna_id", target_col, "database")]
  colnames(df) <- c("miRNA","SYMBOL","database")

  # Evren dışındaki satırları at
  df <- df[df$SYMBOL %in% universe_set, , drop = FALSE]
  if (!nrow(df)) return(NULL)

  # Her miRNA için kontenjans tablosu
  #            |  DEG (sig)  |  non-DEG  |
  # --------------------------------------
  # target     |    a        |    b      |
  # notarget   |    c        |    d      |
  # a = miRNA'nın hedeflediği DEGsayısı; b = miRNA hedefleri - a; c = (DEG - a); d = (Universe - a - b - c)
  map_list <- split(df$SYMBOL, df$miRNA)
  res <- lapply(names(map_list), function(m) {
    tgt <- unique(map_list[[m]])
    a <- length(intersect(tgt, gene_set))
    b <- length(setdiff(tgt, gene_set))
    c <- length(setdiff(gene_set, tgt))
    d <- length(setdiff(universe_set, union(tgt, gene_set)))
    if ((a+b)==0 || (c+d)==0) return(NULL)
    ft <- suppressWarnings(fisher.test(matrix(c(a,b,c,d), nrow=2), alternative="greater"))
    data.frame(miRNA=m, a=a, b=b, c=c, d=d, p.value=ft$p.value, targets_in_deg=a,
               targets_total=a+b, stringsAsFactors = FALSE)
  })
  res <- dplyr::bind_rows(res)
  if (is.null(res) || !nrow(res)) return(NULL)
  res$FDR <- p.adjust(res$p.value, method="BH")
  res$method <- which_table
  res <- res[order(res$FDR, -res$targets_in_deg), ]
  res
}

# ---- Validated ve Predicted için çalıştır
tab_val <- enrich_mirna(sig_genes, universe_symbols, "validated")
tab_pre <- enrich_mirna(sig_genes, universe_symbols, "predicted")
enr_main <- dplyr::bind_rows(tab_val, tab_pre)
if (!is.null(enr_main) && nrow(enr_main)) {
  write.csv(enr_main, file.path(out_dir,"miRNA_enrichment_main.csv"), row.names = FALSE)
  top15 <- head(enr_main[order(enr_main$FDR, -enr_main$targets_in_deg), ], 15)
  if (nrow(top15)) {
    p <- ggplot(top15, aes(x=reorder(miRNA, -log10(FDR)), y=-log10(FDR), fill=method)) +
      geom_col() +
      coord_flip() +
      labs(title = "miRNA Target Enrichment (BH, universe = all tested genes)",
           x = "miRNA", y = expression(-log[10]*"FDR")) +
      theme_minimal(base_size = 12)
    ggsave(file.path(out_dir,"miRNA_enrichment_top15.png"), p, width=8, height=6, dpi=300)
  }
} else {
  message("miRNA enrichment: no signal (check DEG size / universe).")
}

# ---- Ağ verisi (top miRNA → hedef DEGs) – referans için CSV
if (!is.null(tab_val) && nrow(tab_val)) {
  best <- head(tab_val$miRNA[order(tab_val$FDR)], 5)
  mm_net <- tryCatch(
    multiMiR::get_multimir(org="hsa", target = sig_genes, table = "validated", summary = FALSE),
    error = function(e) NULL
  )
  if (!is.null(mm_net) && nrow(mm_net@data)) {
    df <- mm_net@data
    target_col <- c("target_symbol","target.gene","target")[
      c("target_symbol","target.gene","target") %in% names(df)][1]
    if (!is.na(target_col)) {
      net <- df[df$mature_mirna_id %in% best & df[[target_col]] %in% sig_genes,
                c("mature_mirna_id", target_col, "database")]
      colnames(net) <- c("miRNA","SYMBOL","database")
      if (nrow(net)) write.csv(net, file.path(out_dir,"network_top5_miRNA_to_DEG.csv"), row.names = FALSE)
    }
  }
}

# ---- MELAS duyarlılık: varsa, aynı zenginleştirmeyi tekrarla ve karşılaştır
sig_genes_s <- NULL
if (exists("pheno_aligned") && (("is_melas" %in% names(pheno_aligned)) || ("specialcase" %in% names(pheno_aligned)))) {
  mel_flag <- if ("is_melas" %in% names(pheno_aligned)) pheno_aligned$is_melas else pheno_aligned$specialcase
  mel_flag <- tolower(as.character(mel_flag)) %in% c("1","true","t","yes","y")
  if (any(mel_flag)) {
    # DEG_sens zaten hesaplandıysa kullan; yoksa hızlıca hesapla
    if (exists("deg_sens") && "SYMBOL" %in% names(deg_sens)) {
      sig_genes_s <- unique(deg_sens$SYMBOL)
    } else if (exists("expr_cb")) {
      keep_idx <- which(!mel_flag)
      if (length(keep_idx) >= 4) {
        expr_s <- expr_cb[, keep_idx, drop=FALSE]
        ph_s   <- droplevels(pheno_aligned[keep_idx, ])
        des_s  <- model.matrix(~ 0 + group, data = transform(ph_s, group=factor(group, levels=c("Control","Pompe"))))
        colnames(des_s) <- levels(factor(ph_s$group, levels=c("Control","Pompe")))
        fit_s  <- limma::lmFit(expr_s, des_s)
        cont_s <- limma::makeContrasts(Pompe - Control, levels = des_s)
        fit_s2 <- limma::eBayes(limma::contrasts.fit(fit_s, cont_s))
        tt_s   <- limma::topTable(fit_s2, number=Inf, adjust.method="BH")
        # gene-level tekilleştirme
        tt_s$SYMBOL <- tt_s$SYMBOL %||% NA_character_
        if (!"SYMBOL" %in% names(tt_s)) {
          # eğer anotasyon nesneleri hazırsa tt_all/ann'den eşleştirilebilirdi; basitçe geçelim
        }
        if ("SYMBOL" %in% names(tt_s)) {
          tt_s$abs_logFC <- abs(tt_s$logFC)
          tt_sg <- tt_s[!is.na(tt_s$SYMBOL) & nzchar(tt_s$SYMBOL), ]
          tt_sg <- tt_sg[order(tt_sg$SYMBOL, -tt_sg$abs_logFC), ]
          tt_sg <- tt_sg[!duplicated(tt_sg$SYMBOL), ]
          sig_genes_s <- unique(tt_sg$SYMBOL[tt_sg$adj.P.Val < 0.05])
        }
      }
    }
  }
}
`%||%` <- function(x, y) if (is.null(x)) y else x

if (!is.null(sig_genes_s) && length(sig_genes_s)) {
  tab_val_s <- enrich_mirna(sig_genes_s, universe_symbols, "validated")
  tab_pre_s <- enrich_mirna(sig_genes_s, universe_symbols, "predicted")
  enr_sens  <- dplyr::bind_rows(tab_val_s, tab_pre_s)
  if (!is.null(enr_sens) && nrow(enr_sens)) {
    write.csv(enr_sens, file.path(out_dir,"miRNA_enrichment_noMELAS.csv"), row.names = FALSE)
    # Kısa karşılaştırma özeti
    top_main <- head(enr_main$miRNA[order(enr_main$FDR)], 10)
    top_sens <- head(enr_sens$miRNA[order(enr_sens$FDR)], 10)
    ovlp     <- intersect(top_main, top_sens)
    writeLines(c(
      sprintf("Top10 overlap (validated+predicted): %d", length(ovlp)),
      paste("Common:", paste(ovlp, collapse=", "))
    ), file.path(out_dir,"_sensitivity_overlap.txt"))
  }
}

# ---- Oturum bilgisi
writeLines(c(capture.output(sessionInfo())), file.path(out_dir,"session_info.txt"))

message("miRNA enrichment (FAIR/offline) tamamlandı. Çıktılar: ", out_dir)
